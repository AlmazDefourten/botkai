from .. import classes as command_class
import vk_api
import random
import datetime
import json
import requests
from ..keyboards import GetButtonTask
from ..classes import vk, cursor, connection
from ..classes import MessageSettings
from ..classes import UserParams
import traceback

today = datetime.date.today()
chetn = UserParams.getChetn()
BASE_URL = 'https://kai.ru/raspisanie' 
frazi = ["–ú–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å –≤ –∫–∏–Ω–æ üòö", "–ú–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å üòö", "–ú–æ–∂–Ω–æ –ø—Ä–æ–≥—É–ª—è—Ç—å—Å—è –≤ –ª–µ—Å—É üòö", "–ú–æ–∂–Ω–æ —Ä–∞—Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–ª–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é üòö", "–ú–æ–∂–Ω–æ –∑–∞–Ω—è—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä. üòö", "–ú–æ–∂–Ω–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å—Ç—Ä–æ—á–∫–∏ –≥–∏–º–Ω–∞ –ö–ê–ò üòö", "–ú–æ–∂–Ω–æ –∑–∞–Ω—è—Ç—å—Å—è —á–µ–º —Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º üòö", "–ú–æ–∂–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏ üòö"]
def info():
    today = datetime.date.today()
    date = str(datetime.date(today.year, today.month, today.day)  + datetime.timedelta(days=1))
    group = UserParams.getGroup()
    id = MessageSettings.getId()
    taskCount = (int)(MessageSettings.GetTaskCount(date, UserParams.groupId))
    task = ""
    if taskCount == 0:
        task = "\n&#9993;–ó–∞–¥–∞–Ω–∏–π –Ω–µ—Ç"
    else:
        task = "\n&#9993;–í—Å–µ–≥–æ " + str(taskCount) + " –∑–∞–¥–∞–Ω–∏—è(-–∏–π)."
    advert = MessageSettings.GetAdv(date, UserParams.groupId)
    adv = ""
    if advert:
        adv = "\n‚ùó [–û–±—ä—è–≤–ª–µ–Ω–∏–µ] " + MessageSettings.GetAdv(date, UserParams.groupId) + "\n"
    try:
        Timetable =  showTimetable(group, 1)
        if Timetable:
            vk.method("messages.send",
                        {"peer_id": id, "message": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n" + Timetable + adv +  task, "keyboard": GetButtonTask(date), "random_id": random.randint(1, 2147483647)})
        else:
            vk.method("messages.send",
                        {"peer_id": id, "message": "–ó–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç üòé\n" + frazi[random.randint(0, len(frazi)-1)], "random_id": random.randint(1, 2147483647)})
                        
    except Exception as E:
        print('–û—à–∏–±–∫–∞:\n', traceback.format_exc())
        vk.method("messages.send",
                    {"peer_id": id, "message": "–ó–∞–≤—Ç—Ä–∞ –º–æ–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å :]", "keyboard": GetButtonTask(date), "random_id": random.randint(1, 2147483647)})

    return "ok"

def showTimetable(groupId, tomorrow=0):
    try:
        isNormal, response = getResponse(groupId)
        if not isNormal:
            return response
        chetn = UserParams.getChetn()
        today = datetime.date.today() + datetime.timedelta(days=tomorrow)


        if len(response) == 0:
            return "\n&#10060;\t–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ.&#10060;"
        
        response = response[str(datetime.date(today.year, today.month, today.day).isoweekday())]
        result = ''
        now = datetime.datetime.now() + datetime.timedelta(days=tomorrow)
        month = now.month
        if month < 10:
            month = "0" + str(month)
        day = str(now.day) + "." + str(month)
        for elem in response:
            dateinstr = (str((elem["dayDate"]).rstrip())).find(day)
            print(dateinstr)
            if (elem["dayDate"]).rstrip()=="—á–µ—Ç" and ((datetime.date(today.year, today.month, today.day).isocalendar()[1] + chetn) % 2 == 0):
                result += str(chr(10148)) + elem["dayDate"][:3] + " " + " &#8987;" + elem["dayTime"][:5] +  " " + elem["disciplType"][:4] + " " + elem["disciplName"] + " " + (elem["audNum"]).rstrip() + " " + (elem["buildNum"]).rstrip() +' –∑–¥.\n'
            elif (elem["dayDate"]).rstrip()=="–Ω–µ—á" and  not ((datetime.date(today.year, today.month, today.day).isocalendar()[1] + chetn) % 2 == 0):
                result += str(chr(10148)) + elem["dayDate"][:3] + " " + " &#8987;" + elem["dayTime"][:5] + " " + elem["disciplType"][:4] + " " + elem["disciplName"] + " " + (elem["audNum"]).rstrip() + " " + (elem["buildNum"]).rstrip() +' –∑–¥.\n'
            elif (elem["dayDate"]).rstrip()=="–Ω–µ—á/—á–µ—Ç" and  not ((datetime.date(today.year, today.month, today.day).isocalendar()[1] + chetn) % 2 == 0):
                result += str(chr(10148))  + " 1&#8419;–≥—Ä. " + " &#8987;" + elem["dayTime"][:5] + " " + elem["disciplType"][:4] + " " + elem["disciplName"] + " " + (elem["audNum"]).rstrip() + " " + (elem["buildNum"]).rstrip() +' –∑–¥.\n'
            elif (elem["dayDate"]).rstrip()=="–Ω–µ—á/—á–µ—Ç" and  ((datetime.date(today.year, today.month, today.day).isocalendar()[1] + chetn) % 2 == 0):
                result += str(chr(10148))  + " 2&#8419;–≥—Ä. " + " &#8987;" + elem["dayTime"][:5] + " " + elem["disciplType"][:4] + " " + elem["disciplName"] + " " + (elem["audNum"]).rstrip() + " " + (elem["buildNum"]).rstrip() +' –∑–¥.\n'
            elif (elem["dayDate"]).rstrip()=="—á–µ—Ç/–Ω–µ—á" and  ((datetime.date(today.year, today.month, today.day).isocalendar()[1] + chetn) % 2 == 0):
                result += str(chr(10148))  + " 1&#8419;–≥—Ä. " + " &#8987;" + elem["dayTime"][:5] + " " + elem["disciplType"][:4] + " " + elem["disciplName"] + " " + (elem["audNum"]).rstrip() + " " + (elem["buildNum"]).rstrip() +' –∑–¥.\n'
            elif (elem["dayDate"]).rstrip()=="—á–µ—Ç/–Ω–µ—á" and  not ((datetime.date(today.year, today.month, today.day).isocalendar()[1] + chetn) % 2 == 0):
                result += str(chr(10148))  + " 2&#8419;–≥—Ä. " + " &#8987;" + elem["dayTime"][:5] + " " + elem["disciplType"][:4] + " " + elem["disciplName"] + " " + (elem["audNum"]).rstrip() + " " + (elem["buildNum"]).rstrip() +' –∑–¥.\n'
            elif dateinstr != -1:
                result += str(chr(10148)) + str(day) + " " + " &#8987;" + elem["dayTime"][:5] + " " + elem["disciplType"][:4] + " " + elem["disciplName"] + " " + (elem["audNum"]).rstrip() + " " + (elem["buildNum"]).rstrip() + ' –∑–¥.\n'
            elif not ((elem["dayDate"]).rstrip()=="—á–µ—Ç") and not ((elem["dayDate"]).rstrip()=="–Ω–µ—á"):
                result += str(chr(10148)) + elem["dayDate"].rstrip() + " " + " &#8987;" + elem["dayTime"][:5] + " " + elem["disciplType"][:4] + " " + elem["disciplName"] + " " + (elem["audNum"]).rstrip() + " " + (elem["buildNum"]).rstrip() + ' –∑–¥.\n'
        return result
    except ConnectionError as err:
        return "&#9888;–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Ç–∏–ø–∞ ConnectionError. –í–µ—Ä–æ—è—Ç–Ω–æ, —Å–µ—Ä–≤–µ—Ä–∞ –ö–ê–ò –±—ã–ª–∏ –≤—ã–≤–µ–¥–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ—è.&#9888;"
    except requests.exceptions.Timeout as err:
        return "&#9888;–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Ç–∏–ø–∞ Timeout. –í–µ—Ä–æ—è—Ç–Ω–æ, —Å–µ—Ä–≤–µ—Ä–∞ –ö–ê–ò –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã.&#9888;"
    except KeyError as err:
        return False
    except Exception as E:
        print('–û—à–∏–±–∫–∞:\n', traceback.format_exc())

        return ""
    


def getResponse(groupId):
    
    sql = "SELECT * FROM saved_timetable WHERE groupp = {}".format(groupId)
    cursor.execute(sql)
    result = cursor.fetchone()
    if result == None:
        try:
            
            response = requests.post( BASE_URL, data = "groupId=" + str(groupId), headers = {'Content-Type': "application/x-www-form-urlencoded"}, params = {"p_p_id":"pubStudentSchedule_WAR_publicStudentSchedule10","p_p_lifecycle":"2","p_p_resource_id":"schedule"}, timeout = 3)
        except ConnectionError as err:
            return False, "&#9888;–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Ç–∏–ø–∞ ConnectionError. –í–µ—Ä–æ—è—Ç–Ω–æ, —Å–µ—Ä–≤–µ—Ä–∞ –ö–ê–ò –±—ã–ª–∏ –≤—ã–≤–µ–¥–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ—è.&#9888;"
        except requests.exceptions.Timeout as err:
            return False, "&#9888;–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Ç–∏–ø–∞ Timeout. –í–µ—Ä–æ—è—Ç–Ω–æ, —Å–µ—Ä–≤–µ—Ä–∞ –ö–ê–ò –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã.&#9888;"
        except:
            return False, ""
        sql = "INSERT INTO saved_timetable VALUES ({}, '{}', '{}')".format(groupId, datetime.date.today(), json.dumps(response.json()))
        cursor.execute(sql)
        connection.commit()
        return True, response.json()
    else:
        date_update = result[1]
        timetable = result[2]
        if date_update + datetime.timedelta(days=4) >= today:
            try:
                response = requests.post( BASE_URL, data = "groupId=" + str(groupId), headers = {'Content-Type': "application/x-www-form-urlencoded"}, params = {"p_p_id":"pubStudentSchedule_WAR_publicStudentSchedule10","p_p_lifecycle":"2","p_p_resource_id":"schedule"}, timeout = 3)
                sql = "UPDATE saved_timetable SET shedule = '{}', date_update = '{}' WHERE groupp = {}".format(json.dumps(response.json()), datetime.date.today(), groupId)
                cursor.execute(sql)
                connection.commit()
                return True, response.json()
            except:
                sql = "SELECT shedule FROM saved_timetable WHERE groupp = {}".format(groupId)
                cursor.execute(sql)
                result = cursor.fetchone()[0]
                return True, json.loads(result)
        else:
            sql = "SELECT shedule FROM saved_timetable WHERE groupp = {}".format(groupId)
            cursor.execute(sql)
            result = cursor.fetchone()[0]
            return True, json.loads(result)
    
    


    return 

command = command_class.Command()

command.keys = ['–Ω–∞ –∑–∞–≤—Ç—Ä–∞', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', '–∑–∞–≤—Ç—Ä–∞']
command.desciption = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (—Å —É—á–µ—Ç–æ–º —á–µ—Ç–Ω–æ—Å—Ç–∏)'
command.process = info
command.payload = "tomorrow"
command.role = [1,3]